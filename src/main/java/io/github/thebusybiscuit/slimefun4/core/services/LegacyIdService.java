package io.github.thebusybiscuit.slimefun4.core.services;

import io.github.thebusybiscuit.slimefun4.api.exceptions.PrematureCodeException;
import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;
import org.apache.commons.lang.Validate;
import org.bukkit.NamespacedKey;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;

/**
 * An adapter for converting legacy string IDs and newfangled {@link NamespacedKey} IDs.
 *
 * @author Seggan
 */
public class LegacyIdService {

    /**
     * Converts a legacy string ID to a {@link NamespacedKey} using the namespace {@code slimefun}.
     * Addons should prefer using their own plugin as the namespace.
     *
     * @param id The legacy string ID
     * @return The {@link NamespacedKey} for the given ID
     */
    public static @Nonnull NamespacedKey legacyIdToNamespacedKey(@Nonnull String id) {
        Validate.notNull(id, "The provided id cannot be null");
        Validate.notEmpty(id, "The provided id cannot be empty");
        if (Slimefun.instance() == null) {
            throw new PrematureCodeException("You cannot convert a legacy id to a namespaced key before Slimefun was loaded.");
        }

        return new NamespacedKey(Slimefun.instance(), id.toLowerCase(Locale.ROOT));
    }

    private final Map<NamespacedKey, NamespacedKey> idMap = new HashMap<>();

    /**
     * Registers a {@link NamespacedKey} using the namespace {@code slimefun} to a new {@link NamespacedKey}.
     * In effect, all legacy IDs will be automagically converted to the new, given key.
     * This is to maintain compatibility for addons are still moving to the new system.
     *
     * @param legacyId The legacy ID
     * @param newKey The {@link NamespacedKey} for the given ID
     */
    public void registerLegacyId(@Nonnull NamespacedKey legacyId, @Nonnull NamespacedKey newKey) {
        Validate.notNull(legacyId, "The provided legacyId cannot be null");
        Validate.notNull(newKey, "The provided newKey cannot be null");

        idMap.put(legacyId, newKey);
    }

    /**
     * Registers a legacy string ID to the actual {@link NamespacedKey} that was registered.
     * This is to maintain compatibility for addons are still moving to the new system.
     *
     * @param legacyId The legacy string ID
     * @param key The {@link NamespacedKey} for the given ID
     */
    public void registerLegacyId(@Nonnull String legacyId, @Nonnull NamespacedKey key) {
        Validate.notNull(legacyId, "The provided legacyId cannot be null");
        Validate.notNull(key, "The provided key cannot be null");

        idMap.put(legacyIdToNamespacedKey(legacyId), key);
    }

    /**
     * Converts a {@link NamespacedKey} that may be autogenerated by {@link #legacyIdToNamespacedKey(String)}
     * to the registered {@link NamespacedKey} if it exists.
     *
     * @param key The {@link NamespacedKey} to convert
     * @return The registered {@link NamespacedKey} if it exists, otherwise the provided key
     */
    public @Nonnull NamespacedKey convertTempId(@Nonnull NamespacedKey key) {
        Validate.notNull(key, "The provided key cannot be null");

        return idMap.getOrDefault(key, key);
    }

    /**
     * Converts a possible legacy string ID to a {@link NamespacedKey}, converting to new keys if needed.
     *
     * @param id The possible legacy string ID
     * @return The {@link NamespacedKey} for the given ID, or {@code null} if the ID is {@code null}
     */
    public NamespacedKey loadPossibleLegacyId(@Nullable String id) {
        if (id == null) {
            return null;
        }

        Validate.notEmpty(id, "The provided id cannot be empty");

        NamespacedKey key;
        if (PatternUtils.ANY_NAMESPACEDKEY.matcher(id).matches()) {
            key = Objects.requireNonNull(NamespacedKey.fromString(id));
        } else {
            key = legacyIdToNamespacedKey(id);
        }

        return convertTempId(key);
    }
}
